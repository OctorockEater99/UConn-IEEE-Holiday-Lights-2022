#include <FastLED.h>
#include <avr/pgmspace.h>               //pgmspace library used to store images in program storage space

#define DATA_PIN 6
#define COLS 14                         //number of leds for x axis in canvas
#define ROWS 16                         //number of leds for y axis in canvas
#define PADDING 4                       //number of leds for padding per row
#define NUM_CANVAS_LEDS ROWS*COLS       //total number of leds in canvas
#define NUM_LEDS ROWS*(COLS + PADDING)  //total number of leds in strips

CRGB leds[NUM_LEDS];

//images are stored in program storage space using PROGMEM keyword
//image dimensions should match with led canvas dimensions COLS and ROWS
//image must be single 1d array of each pixel rgb values
const unsigned char tree[] PROGMEM = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 33, 108, 45, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 129, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 128, 1, 0, 129, 13, 0, 124, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 123, 3, 11, 122, 11, 4, 124, 1, 243, 4, 9, 0, 126, 0, 16, 111, 12, 3, 126, 9, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 29, 100, 38, 32, 106, 40, 44, 96, 44, 35, 106, 33, 49, 102, 40, 42, 95, 27, 39, 83, 41, 40, 99, 41, 35, 99, 29, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 1, 128, 2, 4, 127, 3, 12, 118, 13, 2, 126, 7, 0, 128, 2, 1, 122, 7, 23, 112, 21, 3, 125, 6, 4, 125, 2, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 2, 127, 4, 10, 123, 5, 0, 128, 3, 0, 128, 6, 6, 4, 237, 21, 114, 25, 2, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 3, 125, 4, 5, 120, 15, 26, 115, 0, 249, 219, 0, 0, 129, 0, 7, 120, 2, 23, 113, 17, 5, 124, 6, 3, 127, 7, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 40, 108, 23, 39, 108, 43, 40, 106, 46, 45, 98, 56, 39, 104, 44, 37, 105, 47, 171, 32, 37, 40, 91, 53, 39, 103, 46, 34, 110, 39, 39, 106, 32, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 1, 0, 122, 4, 0, 127, 7, 8, 121, 5, 0, 127, 5, 0, 130, 8, 237, 10, 4, 17, 125, 35, 2, 126, 0, 0, 130, 6, 8, 128, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 130, 0, 2, 128, 1, 10, 119, 11, 0, 127, 7, 0, 129, 0, 0, 123, 3, 21, 114, 22, 1, 126, 4, 2, 126, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 128, 0, 237, 5, 1, 7, 125, 15, 13, 118, 10, 2, 124, 0, 4, 11, 220, 2, 127, 0, 13, 112, 14, 12, 120, 2, 253, 214, 0, 1, 128, 11, 0, 0, 0, 12, 33, 7, 28, 89, 32, 46, 102, 30, 34, 100, 29, 30, 99, 35, 45, 101, 47, 34, 108, 37, 34, 102, 52, 30, 101, 31, 38, 83, 37, 39, 104, 43, 36, 105, 39, 43, 101, 24, 29, 99, 27, 0, 0, 0, 8, 124, 0, 9, 125, 0, 5, 126, 0, 7, 122, 4, 17, 119, 5, 2, 126, 6, 2, 127, 10, 0, 123, 3, 28, 106, 28, 9, 125, 0, 3, 127, 0, 9, 125, 0, 2, 128, 6, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 162, 44, 40, 162, 43, 44, 155, 42, 38, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 161, 45, 38, 162, 43, 44, 159, 39, 40, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const unsigned char amoung[] PROGMEM = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 0, 255, 145, 0, 255, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 97, 165, 255, 97, 165, 255, 252, 252, 252, 252, 252, 252, 252, 252, 252, 97, 165, 255, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 97, 165, 255, 97, 165, 255, 97, 165, 255, 97, 165, 255, 97, 165, 255, 97, 165, 255, 0, 255, 145, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 255, 205, 97, 255, 205, 97, 255, 205, 97, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 0, 255, 145, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 255, 205, 97, 0, 255, 145, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 255, 205, 97, 246, 192, 74, 246, 193, 75, 255, 205, 97, 255, 205, 97, 247, 196, 86, 255, 205, 97, 247, 187, 57, 247, 198, 90, 0, 255, 145, 0, 255, 145, 255, 205, 97, 255, 205, 97, 0, 255, 145, 255, 205, 97, 251, 201, 86, 251, 199, 82, 255, 205, 97, 255, 205, 97, 251, 199, 83, 255, 205, 97, 252, 191, 61, 251, 198, 81, 0, 255, 145, 0, 0, 0, 0, 255, 145, 0, 255, 145, 0, 255, 145, 255, 205, 97, 250, 198, 82, 251, 197, 79, 0, 255, 145, 0, 255, 145, 0, 255, 145, 255, 205, 97, 252, 192, 64, 0, 255, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 0, 255, 145, 255, 205, 97, 251, 195, 71, 251, 195, 71, 0, 255, 145, 0, 0, 0, 0, 255, 145, 255, 205, 97, 251, 193, 66, 0, 255, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 255, 205, 97, 251, 193, 63, 252, 194, 65, 0, 255, 145, 0, 0, 0, 0, 255, 145, 255, 205, 97, 247, 190, 65, 0, 255, 145, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 0, 0, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 255, 145, 0, 0, 0 };
const unsigned char penguin[] PROGMEM = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 0, 0, 99, 255, 255, 0, 255, 255, 255, 255, 255, 255, 0, 0, 99, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 255, 255, 255, 255, 255, 0, 0, 99, 255, 255, 0, 255, 255, 255, 255, 255, 255, 0, 0, 99, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 255, 115, 0, 255, 115, 0, 255, 115, 0, 255, 115, 0, 255, 255, 0, 0, 0, 99, 0, 0, 99, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100, 0, 0, 100, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 100, 0, 0, 100, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 255, 255, 0, 0, 0, 100, 0, 0, 100 };
const unsigned char u[] PROGMEM = { 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const unsigned char c[] PROGMEM = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const unsigned char o[] PROGMEM = { 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0 };
const unsigned char n[] PROGMEM = { 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 153, 217, 234, 153, 217, 234, 153, 217, 234, 153, 217, 234, 0, 0, 0 };
const unsigned char ieee[] PROGMEM = {};

/*
Ordering of the LEDs. Keep in mind, the image may or may not be flipped depending on how it is displayed.
Normal serpentine ordering. This can be achieved with cutting the LED string lights to appropriate sizes.
0   ->  1  ->  2  ->  3  ->  4
9   <-  8  <-  7  <-  6  <-  5
10  -> 11  -> 12  -> 13  -> ...

Serpentine ordering with padding. Due to limitation of not being able to cut LED string lights, some rows
will not be balanced correctly leading to undesirable image effects. Use some LEDs as padding to prevent
this distortion. 
X  ->  0  ->  1  ->  2  ->  3  ->  4  ->  X
X  <-  9  <-  8  <-  7  <-  6  <-  5  <-  X
X  -> 10  -> 11  -> 12  -> 13  -> 14  ->  ...
*/

int XY_canvas(int x, int y) {
  /**
   * Maps the correct cartesian coordinate to the LED string canvas. Accounts for padding.
   * 
   * @param x the x coordinate of the image pixel
   * @param y the y coordinate of the image pixel
   * @return i the index of the FastLED array to manipulate
  **/
  int i;
  int j = y * COLS + x;
  int q = (j / COLS) * PADDING;
    
  if (y & 1) {                    // if the y-coordinate (row) is odd,
    int rX = COLS - 1 - x;        // reverse rows, indices correctly reversed
    i = y * COLS + rX + q;
  } else {                        // otherwise, forward rows
    i = j + q;
  }
  return i;
}

int XY(int x, int y) {
  /**
   * Maps the correct cartesian coordinate to an array index.
   * 
   * @param x the x coordinate
   * @param y the y coordinate
   * @return the proper array index
  **/
  return y * COLS + x;
}

void loadImage(struct CRGB* leds_dest, unsigned char* img) { // loads image onto the canvas
  /**
   * Loads input image onto the canvas.
   * 
   * @param leds_dest the canvas destination to map the image onto
   * @param img image list of length 3 * number of pixels
   * @return None
   * 
   * After calling this function, buffers are filled with the appropriate image data.
   * FastLED.show() must be called afterwards to update the LED string.
  **/
  for (int j = 0; j < ROWS; j++) {                                              
    for (int i = 0; i < COLS; i++) {
      leds_dest[XY_canvas(i, j)].r = pgm_read_word_near(img + (3 * XY(i, j)));        // use pgm_read_word_near() from avr/pgmspace 
      leds_dest[XY_canvas(i, j)].g = pgm_read_word_near(img + 1 + (3 * XY(i, j)));    // since that is where the images are stored
      leds_dest[XY_canvas(i, j)].b = pgm_read_word_near(img + 2 + (3 * XY(i, j)));    // images are stored as single array of rgb values
    }
  }
}

void loadColor(struct CRGB* leds_dest, struct CRGB color) {
  /**
   * Loads a color onto the canvas
   * 
   * @param leds_dest the canvas destination to load a color onto
   * @param color the color to fill the canvas with
   * @return None
   * 
   * After calling this function, buffers are filled with the appropriate color data.
   * FastLED.show() must be called afterwards to update the LED string.
  **/
  for (int j = 0; j < ROWS; j++) {
    for (int i = 0; i < COLS; i++) {
      leds_dest[XY_canvas(i, j)] = color;
    }
  }
}

void indexDebug(struct CRGB* leds_dest, struct CRGB color) {
  /**
   * Debug function to check whether the LED string matrix has been properly set up.
   * Iterates through the canvas and turns on single LED in order
   * 
   * @param leds_dest the canvas destination to load a color onto
   * @param color the color to fill the canvas with
   * @return None
  **/
  for (int j = 0; j < ROWS; j++) {
    for (int i = 0; i < COLS; i++) {
      leds_dest[XY_canvas(i, j)] = color;
      FastLED.show();
      delay(50);
    }
  }
  delay(500);
  FastLED.clear();
  FastLED.show();
}

uint8_t rd = random8(0, 5);

void setup() {
  // initialize LED string ojbect and Serial connection
  Serial.begin(9600);
  FastLED.addLeds<WS2812B, DATA_PIN, GRB>(leds, NUM_LEDS);  //.setCorrection(TypicalLEDStrip);
  FastLED.clear();
}

void loop() {
  //holiday tree
  FastLED.clear();
  loadImage(leds, tree);
  FastLED.show();
  delay(20000);

  //ieee
  FastLED.clear();
  loadImage(leds, ieee);
  FastLED.show();
  delay(5000);
  
  //uconn logo
  //u
  FastLED.clear();
  loadImage(leds, u);
  FastLED.show();
  delay(1000);
  FastLED.clear();
  FastLED.show();
  delay(500);
  //c
  FastLED.clear();
  loadImage(leds, c);
  FastLED.show();
  delay(1000);
  FastLED.clear();
  FastLED.show();
  delay(500);
  //o
  FastLED.clear();
  loadImage(leds, o);
  FastLED.show();
  delay(1000);
  FastLED.clear();
  FastLED.show();
  delay(500);
  //n
  for (int k = 0; k < 2; k++) {
    FastLED.clear();
    loadImage(leds, n);
    FastLED.show();
    delay(1000);
    FastLED.clear();
    FastLED.show();
    delay(500);
  }

  //among us :)
  if (rd == 0) {
    FastLED.clear();
    loadImage(leds, amoung);
    FastLED.show();
    delay(5000);
  } else {
    //penguin
    FastLED.clear();
    loadImage(leds, penguin);
    FastLED.show();
    delay(5000);
  }
  rd = random8(0, 5);
}
